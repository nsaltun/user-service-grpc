// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/user/v1/userapi.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nsaltun/user-service-grpc/proto/gen/go/core/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserAPIName is the fully-qualified name of the UserAPI service.
	UserAPIName = "core.user.v1.UserAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAPICreateUserProcedure is the fully-qualified name of the UserAPI's CreateUser RPC.
	UserAPICreateUserProcedure = "/core.user.v1.UserAPI/CreateUser"
	// UserAPIUpdateUserByIdProcedure is the fully-qualified name of the UserAPI's UpdateUserById RPC.
	UserAPIUpdateUserByIdProcedure = "/core.user.v1.UserAPI/UpdateUserById"
	// UserAPIDeleteUserByIdProcedure is the fully-qualified name of the UserAPI's DeleteUserById RPC.
	UserAPIDeleteUserByIdProcedure = "/core.user.v1.UserAPI/DeleteUserById"
	// UserAPIListUsersProcedure is the fully-qualified name of the UserAPI's ListUsers RPC.
	UserAPIListUsersProcedure = "/core.user.v1.UserAPI/ListUsers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userAPIServiceDescriptor              = v1.File_core_user_v1_userapi_proto.Services().ByName("UserAPI")
	userAPICreateUserMethodDescriptor     = userAPIServiceDescriptor.Methods().ByName("CreateUser")
	userAPIUpdateUserByIdMethodDescriptor = userAPIServiceDescriptor.Methods().ByName("UpdateUserById")
	userAPIDeleteUserByIdMethodDescriptor = userAPIServiceDescriptor.Methods().ByName("DeleteUserById")
	userAPIListUsersMethodDescriptor      = userAPIServiceDescriptor.Methods().ByName("ListUsers")
)

// UserAPIClient is a client for the core.user.v1.UserAPI service.
type UserAPIClient interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUserById(context.Context, *connect.Request[v1.UpdateUserByIdRequest]) (*connect.Response[v1.UpdateUserByIdResponse], error)
	DeleteUserById(context.Context, *connect.Request[v1.DeleteUserByIdRequest]) (*connect.Response[v1.DeleteUserByIdResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
}

// NewUserAPIClient constructs a client for the core.user.v1.UserAPI service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userAPIClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserAPICreateUserProcedure,
			connect.WithSchema(userAPICreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUserById: connect.NewClient[v1.UpdateUserByIdRequest, v1.UpdateUserByIdResponse](
			httpClient,
			baseURL+UserAPIUpdateUserByIdProcedure,
			connect.WithSchema(userAPIUpdateUserByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUserById: connect.NewClient[v1.DeleteUserByIdRequest, v1.DeleteUserByIdResponse](
			httpClient,
			baseURL+UserAPIDeleteUserByIdProcedure,
			connect.WithSchema(userAPIDeleteUserByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserAPIListUsersProcedure,
			connect.WithSchema(userAPIListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userAPIClient implements UserAPIClient.
type userAPIClient struct {
	createUser     *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	updateUserById *connect.Client[v1.UpdateUserByIdRequest, v1.UpdateUserByIdResponse]
	deleteUserById *connect.Client[v1.DeleteUserByIdRequest, v1.DeleteUserByIdResponse]
	listUsers      *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
}

// CreateUser calls core.user.v1.UserAPI.CreateUser.
func (c *userAPIClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUserById calls core.user.v1.UserAPI.UpdateUserById.
func (c *userAPIClient) UpdateUserById(ctx context.Context, req *connect.Request[v1.UpdateUserByIdRequest]) (*connect.Response[v1.UpdateUserByIdResponse], error) {
	return c.updateUserById.CallUnary(ctx, req)
}

// DeleteUserById calls core.user.v1.UserAPI.DeleteUserById.
func (c *userAPIClient) DeleteUserById(ctx context.Context, req *connect.Request[v1.DeleteUserByIdRequest]) (*connect.Response[v1.DeleteUserByIdResponse], error) {
	return c.deleteUserById.CallUnary(ctx, req)
}

// ListUsers calls core.user.v1.UserAPI.ListUsers.
func (c *userAPIClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UserAPIHandler is an implementation of the core.user.v1.UserAPI service.
type UserAPIHandler interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUserById(context.Context, *connect.Request[v1.UpdateUserByIdRequest]) (*connect.Response[v1.UpdateUserByIdResponse], error)
	DeleteUserById(context.Context, *connect.Request[v1.DeleteUserByIdRequest]) (*connect.Response[v1.DeleteUserByIdResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
}

// NewUserAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserAPIHandler(svc UserAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userAPICreateUserHandler := connect.NewUnaryHandler(
		UserAPICreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userAPICreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAPIUpdateUserByIdHandler := connect.NewUnaryHandler(
		UserAPIUpdateUserByIdProcedure,
		svc.UpdateUserById,
		connect.WithSchema(userAPIUpdateUserByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAPIDeleteUserByIdHandler := connect.NewUnaryHandler(
		UserAPIDeleteUserByIdProcedure,
		svc.DeleteUserById,
		connect.WithSchema(userAPIDeleteUserByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userAPIListUsersHandler := connect.NewUnaryHandler(
		UserAPIListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userAPIListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.user.v1.UserAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAPICreateUserProcedure:
			userAPICreateUserHandler.ServeHTTP(w, r)
		case UserAPIUpdateUserByIdProcedure:
			userAPIUpdateUserByIdHandler.ServeHTTP(w, r)
		case UserAPIDeleteUserByIdProcedure:
			userAPIDeleteUserByIdHandler.ServeHTTP(w, r)
		case UserAPIListUsersProcedure:
			userAPIListUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedUserAPIHandler struct{}

func (UnimplementedUserAPIHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.user.v1.UserAPI.CreateUser is not implemented"))
}

func (UnimplementedUserAPIHandler) UpdateUserById(context.Context, *connect.Request[v1.UpdateUserByIdRequest]) (*connect.Response[v1.UpdateUserByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.user.v1.UserAPI.UpdateUserById is not implemented"))
}

func (UnimplementedUserAPIHandler) DeleteUserById(context.Context, *connect.Request[v1.DeleteUserByIdRequest]) (*connect.Response[v1.DeleteUserByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.user.v1.UserAPI.DeleteUserById is not implemented"))
}

func (UnimplementedUserAPIHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.user.v1.UserAPI.ListUsers is not implemented"))
}
